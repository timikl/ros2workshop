<?xml version="1.0"?>

<robot name="differential_drive_robot" xmlns:xacro="http://www.ros.org/wiki/xacro">

    <xacro:include filename="$(find myrobot_description)/urdf/include/inertial.xacro" />
    <!-- <xacro:include filename="$(find myrobot_description)/urdf/include/common_macros.xacro" /> -->
    <!-- <xacro:property name="robot_yaml" value="$(find myrobot_description)/config/robot.yaml" />  
    <xacro:property name="robot" value="${xacro.load_yaml(robot_yaml)}"/> -->
    
    <xacro:include filename="$(find myrobot_description)/urdf/include/sensors_macros.xacro" />
    <xacro:property name="sensors_yaml" value="$(find myrobot_description)/config/sensors.yaml" />  
    <xacro:property name="sensors" value="${xacro.load_yaml(sensors_yaml)}"/>


    <!-- Robot Parameters -->
    <xacro:property name="body_length" value="0.45"/>
    <xacro:property name="body_width" value="0.35"/>
    <xacro:property name="body_height" value="0.15"/>
    <xacro:property name="body_offset_x" value="-0.1"/>
    <xacro:property name="body_offset_y" value="0.0"/>
    <xacro:property name="body_offset_z" value="0.02"/>
    <xacro:property name="body_density" value="7850.0"/> <!-- Steel -->
    <xacro:property name="body_mass" value="${body_density * body_length * body_height * body_width}"/>

    <xacro:property name="wheel_radius" value="0.1"/>
    <xacro:property name="wheel_width" value="0.05"/>
    <xacro:property name="wheel_separation" value="${body_width + wheel_width}"/>
    <xacro:property name="wheel_offset" value="${body_length/2 - wheel_radius}"/>
    <xacro:property name="wheel_density" value="900"/> <!-- Ruber -->
    <xacro:property name="wheel_mass" value="${wheel_density * pi * wheel_radius * wheel_radius * wheel_width}"/>

    <xacro:property name="caster_radius" value="0.1"/>
    <xacro:property name="caster_offset" value="-0.2"/>
    <xacro:property name="caster_density" value="0.1"/>
    <xacro:property name="caster_mass" value="${caster_density * 4.0/3.0 * pi * caster_radius * caster_radius * caster_radius}"/>
    <xacro:property name="caster_inertia_x" value="${2.0/5.0 * caster_mass * caster_radius * caster_radius}"/>
    <xacro:property name="caster_inertia_y" value="${2.0/5.0 * caster_mass * caster_radius * caster_radius}"/>
    <xacro:property name="caster_inertia_z" value="${2.0/5.0 * caster_mass * caster_radius * caster_radius}"/>

    <!-- Control Parameters -->    
    <xacro:property name="max_linear_acceleration" value="10"/>

    <!-- Body Link -->
    <link name="base_link">
        <visual>
            <origin xyz="${body_offset_x} ${body_offset_y} ${body_offset_z}" rpy="0 0 0"/>
            <geometry>
                <box size="${body_length} ${body_width} ${body_height}"/>
            </geometry>
            <material name="body_material">
                <color rgba="0.25 0.5 0.25 1.0"/>
            </material>
        </visual>
        <collision>
            <origin xyz="${body_offset_x} ${body_offset_y} ${body_offset_z}" rpy="0 0 0"/>
            <geometry>
                <box size="${body_length} ${body_width} ${body_height}"/>
            </geometry>
        </collision>
        <xacro:box_inertial_with_origin  x="${body_length}" y="${body_width}" z="${body_height}" mass="${body_mass}">
            <origin xyz="${body_offset_x} ${body_offset_y} ${body_offset_z}" rpy="0 0 0" />
        </xacro:box_inertial_with_origin>
    </link>

    <!-- Left Wheel -->
    <link name="left_wheel_link">
        <visual>
            <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
            <geometry>
                <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
            </geometry>
            <material name="wheel_material">
                <color rgba="0 0 0 1.0"/>
            </material>
        </visual>
        <collision>
            <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
            <geometry>
                <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
            </geometry>
        </collision>
        <xacro:cylinder_inertial_with_origin radius="${wheel_radius}" length="${wheel_width}" mass="${wheel_mass}">
            <origin xyz="0 0 0" rpy="0 0 0" />
        </xacro:cylinder_inertial_with_origin>
    </link>

    <!-- Right Wheel -->
    <link name="right_wheel_link">
        <visual>
            <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
            <geometry>
                <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
            </geometry>
            <material name="wheel_material">
                <color rgba="0 0 0 1.0"/>
            </material>
        </visual>
        <collision>
            <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
            <geometry>
                <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
            </geometry>
        </collision>
        <xacro:cylinder_inertial_with_origin radius="${wheel_radius}" length="${wheel_width}" mass="${wheel_mass}">
            <origin xyz="0 0 0" rpy="${pi/2} 0 0" />
        </xacro:cylinder_inertial_with_origin>
    </link>

    <!-- Caster Wheel -->
    <link name="caster_link">
        <visual>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <sphere radius="${caster_radius}"/>
            </geometry>
            <material name="caster_material">
                <color rgba="0 0 0 1.0"/>
            </material>
        </visual>
        <collision>
            <origin xyz="0 0 0" rpy="0 0 0"/>
            <geometry>
                <sphere radius="${caster_radius}"/>
            </geometry>
        </collision>
        <xacro:sphere_inertial_with_origin radius="${caster_radius}" mass="${caster_mass}">
            <origin xyz="0 0 0" rpy="0 0 0" />
        </xacro:sphere_inertial_with_origin>
    </link>

    <!--  Base footprint -->
    <link name="base_footprint"/>

    <!-- Base footprint joint -->
    <joint name="base_footprint_joint" type="fixed">
        <parent link="base_footprint"/>
        <child link="base_link"/>
        <origin xyz="0 0 ${wheel_radius}" rpy="0 0 0"/>
    </joint>

    <!-- Left wheel joint -->
    <joint name="left_wheel_joint" type="continuous">
        <origin xyz="0 ${wheel_separation/2} -${wheel_radius/2}" rpy="0 0 0"/>
        <parent link="base_link"/>
        <child link="left_wheel_link"/>
        <axis xyz="0 1 0"/>
        <limit effort="100" velocity="10.0"/>
    </joint>

    <!-- Right wheel joint -->
    <joint name="right_wheel_joint" type="continuous">
        <origin xyz="0 ${-wheel_separation/2} -${wheel_radius/2}" rpy="0 0 0"/>
        <parent link="base_link"/>
        <child link="right_wheel_link"/>
        <axis xyz="0 1 0"/>
        <limit effort="100" velocity="10.0"/>
    </joint>

    <!-- Caster joint -->
    <joint name="caster_joint" type="fixed">
        <origin xyz="${caster_offset} 0 -${caster_radius/2}" rpy="0 0 0"/>
        <parent link="base_link"/>
        <child link="caster_link"/>
    </joint>

    <!-- Gazebo Parameters -->
    <gazebo reference="base_link">
        <mu1>1.0</mu1>
        <mu2>1.0</mu2>
    </gazebo>

    <gazebo reference="right_wheel_link">
        <mu1>1.0</mu1>
        <mu2>1.0</mu2>
    </gazebo>

    <gazebo reference="left_wheel_link">
        <mu1>1.0</mu1>
        <mu2>1.0</mu2>
    </gazebo>

    <gazebo reference="caster_link">
        <mu1>0.000001</mu1>
        <mu2>0.000001</mu2>
    </gazebo>

    <!-- Gazebo Plugins -->
    <gazebo>
        <plugin filename="gz-sim-diff-drive-system" name="gz::sim::systems::DiffDrive">
            <right_joint>right_wheel_joint</right_joint>
            <left_joint>left_wheel_joint</left_joint>
            <wheel_separation>${wheel_separation}</wheel_separation>
            <wheel_radius>${wheel_radius}</wheel_radius>
            <max_linear_acceleration>${max_linear_acceleration}</max_linear_acceleration>
            <odom_publish_frequency>100</odom_publish_frequency>
            <topic>cmd_vel</topic>
            <odom_topic>odom</odom_topic>
            <tf_topic>tf</tf_topic>
            <frame_id>odom</frame_id>
            <child_frame_id>base_footprint</child_frame_id>
        </plugin>

        <plugin filename="gz-sim-joint-state-publisher-system" name="gz::sim::systems::JointStatePublisher">
            <topic>joint_states</topic>
            <joint_name>right_wheel_joint</joint_name>
            <joint_name>left_wheel_joint</joint_name>
        </plugin>
    </gazebo>

    <xacro:camera camera="${sensors['camera']}" robot="myrobot">
        <origin xyz="${sensors['camera']['x']} ${sensors['camera']['y']} ${sensors['camera']['z']}" 
            rpy="${sensors['camera']['roll']} ${sensors['camera']['pitch']} ${sensors['camera']['yaw']}" />
    </xacro:camera>

    <xacro:lidar lidar="${sensors['lidar']}" robot="myrobot">
        <origin xyz="${sensors['lidar']['x']} ${sensors['lidar']['y']} ${sensors['lidar']['z']}" 
            rpy="${sensors['lidar']['roll']} ${sensors['lidar']['pitch']} ${sensors['lidar']['yaw']}" />
    </xacro:lidar>

</robot>
